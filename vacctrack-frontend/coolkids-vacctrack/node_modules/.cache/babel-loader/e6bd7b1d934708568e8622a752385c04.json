{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Desktop/software-guild/final-project/VaccTrak/vacctrack-frontend/coolkids-vacctrack/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport mapStyles from './mapStyles';\nimport Search from './Search';\nimport Locate from './Locate';\nimport Create from './Create';\nimport { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVICE_URL = \"http://localhost:8080/VaccTrak\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\nconst center = {\n  lat: 37.090240,\n  lng: -95.712891\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nvar markers2 = [{\n  \"id\": 52,\n  \"name\": \"Six Flags America Theme Park\",\n  \"address\": \"13710 Central Ave.\",\n  \"city\": \"Upper Marlboro\",\n  \"state\": \"ND\",\n  \"zipcode\": \" 20721\",\n  \"phoneNumber\": \"N/A\",\n  \"singleDoses\": 10887,\n  \"doubleDoses\": 10478\n}, {\n  \"id\": 53,\n  \"name\": \"Holy Cross Hospital\",\n  \"address\": \"1500 Forest Glen Road\",\n  \"city\": \"Silver Spring\",\n  \"state\": \"MD\",\n  \"zipcode\": \" 20910\",\n  \"phoneNumber\": \"N/A\",\n  \"singleDoses\": 3234,\n  \"doubleDoses\": 3434\n}, {\n  \"id\": 54,\n  \"name\": \"Luminis Health Doctors Community Medical Center\",\n  \"address\": \"8118 Good Luck Road\",\n  \"city\": \" Lanham\",\n  \"state\": \"MD\",\n  \"zipcode\": \"20706\",\n  \"phoneNumber\": \"N/A\",\n  \"singleDoses\": 8766,\n  \"doubleDoses\": 7654\n}];\n\nfunction App() {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAp1BrMA7-YofbC3iJapScTWCpI8GmZm-w\",\n    libraries: libraries\n  }); // const [markers, setMarkers] = useState([]);\n\n  const [selected, setSelected] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  useEffect(() => {\n    fetch(SERVICE_URL + \"/getAllVaccCenters\").then(data => data.json()).then(data => setMarkers(data)); //getData(markers2).then(data => setMarkers(data));\n  }, []);\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n  }, []);\n\n  const getData = async vaccList => {\n    return Promise.all(vaccList.map(vaccCenter => getVaccCenterLatLong(vaccCenter)));\n  };\n\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  const getVaccCenterLatLong = useCallback(async vaccCenter => {\n    const address = vaccCenter.address + \" \" + vaccCenter.city + \", \" + vaccCenter.state + \" \" + vaccCenter.zipcode;\n\n    try {\n      const {\n        lat,\n        lng\n      } = await getLatLngFromAddress(address);\n      return { ...vaccCenter,\n        lat,\n        lng\n      };\n    } catch (error) {\n      console.log(\"error getting latlong for vaccenter \" + vaccCenter.id);\n    }\n  }, []);\n  const getLatLngFromAddress = useCallback(async address => {\n    try {\n      const results = await getGeocode({\n        address\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]);\n      return {\n        lat,\n        lng\n      };\n    } catch (error) {\n      console.log(\"error1\");\n    }\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"logo.png\",\n      alt: \"logo\",\n      id: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      panTo: panTo,\n      getLatLngFromAddress: getLatLngFromAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Locate, {\n      panTo: panTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 4.7,\n      center: center,\n      options: options,\n      onLoad: onMapLoad,\n      children: [markers.map((marker, i) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.latitude,\n          lng: marker.longitude\n        },\n        onClick: () => {\n          setSelected(marker);\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.latitude,\n          lng: selected.longitude\n        },\n        onCloseClick: () => setSelected(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: selected.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"1st Dose: \", selected.singleDoses]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"2nd Dose: \", selected.doubleDoses]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), \"Total Vaccinated: \", selected.singleDoses + selected.doubleDoses]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 11\n  }, this);\n}\n\n_s(App, \"l4e7/CTE+NbQgITefhZ7sv2i9r4=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joey/Desktop/software-guild/final-project/VaccTrak/vacctrack-frontend/coolkids-vacctrack/src/App.js"],"names":["React","useState","useRef","useCallback","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","mapStyles","Search","Locate","Create","getGeocode","getLatLng","SERVICE_URL","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","markers2","App","isLoaded","loadError","googleMapsApiKey","selected","setSelected","markers","setMarkers","fetch","then","data","json","mapRef","onMapLoad","map","current","getData","vaccList","Promise","all","vaccCenter","getVaccCenterLatLong","panTo","setZoom","address","city","state","zipcode","getLatLngFromAddress","error","console","log","id","results","marker","i","latitude","longitude","name","singleDoses","doubleDoses"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {useState, useRef, useCallback, useEffect} from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport mapStyles from './mapStyles';\nimport Search from './Search';\nimport Locate from './Locate';\nimport Create from './Create';\nimport {\n  getGeocode,\n  getLatLng\n} from \"use-places-autocomplete\";\n\nconst SERVICE_URL = \"http://localhost:8080/VaccTrak\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\nconst center = {\n  lat: 37.090240,\n  lng: -95.712891\n}\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n}\n\nvar markers2 = [\n    {\n        \"id\": 52,\n        \"name\": \"Six Flags America Theme Park\",\n        \"address\": \"13710 Central Ave.\",\n        \"city\": \"Upper Marlboro\",\n        \"state\": \"ND\",\n        \"zipcode\": \" 20721\",\n        \"phoneNumber\": \"N/A\",\n        \"singleDoses\": 10887,\n        \"doubleDoses\": 10478\n    },\n    {\n        \"id\": 53,\n        \"name\": \"Holy Cross Hospital\",\n        \"address\": \"1500 Forest Glen Road\",\n        \"city\": \"Silver Spring\",\n        \"state\": \"MD\",\n        \"zipcode\": \" 20910\",\n        \"phoneNumber\": \"N/A\",\n        \"singleDoses\": 3234,\n        \"doubleDoses\": 3434\n    },\n    {\n        \"id\": 54,\n        \"name\": \"Luminis Health Doctors Community Medical Center\",\n        \"address\": \"8118 Good Luck Road\",\n        \"city\": \" Lanham\",\n        \"state\": \"MD\",\n        \"zipcode\": \"20706\",\n        \"phoneNumber\": \"N/A\",\n        \"singleDoses\": 8766,\n        \"doubleDoses\": 7654\n    }\n]\n\n\nfunction App() {\n  const {isLoaded, loadError} = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAp1BrMA7-YofbC3iJapScTWCpI8GmZm-w\",\n    libraries: libraries\n  })\n  // const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    fetch(SERVICE_URL + \"/getAllVaccCenters\")\n      .then(data => data.json())\n      .then(data => setMarkers(data));\n      //getData(markers2).then(data => setMarkers(data));\n  }, []);\n\n  const mapRef = useRef();\n  const onMapLoad = useCallback(\n    (map) => {\n      mapRef.current = map;\n    },\n    []\n  )\n\n  const getData = async (vaccList) => {\n    return Promise.all(vaccList.map((vaccCenter) => \n        getVaccCenterLatLong(vaccCenter)));\n  }\n\n  const panTo = useCallback(\n  ({lat, lng}) => {\n    mapRef.current.panTo({lat, lng});\n    mapRef.current.setZoom(14);\n  },\n  [],\n  )\n\n  const getVaccCenterLatLong = useCallback(async (vaccCenter) => {\n    const address = vaccCenter.address + \" \" + vaccCenter.city + \", \" + vaccCenter.state + \" \" + vaccCenter.zipcode;\n    try {\n    const {lat, lng} = await getLatLngFromAddress(address);\n    return {...vaccCenter, lat, lng};\n    } catch(error) {\n      console.log(\"error getting latlong for vaccenter \" + vaccCenter.id);\n    }\n    \n  }, [])\n\n  const getLatLngFromAddress = useCallback(async (address) => {\n        try {\n          const results = await getGeocode({address});\n          const { lat, lng } = await getLatLng(results[0]);\n          return ({lat, lng})\n        } catch(error) {\n          console.log(\"error1\");\n        }\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n\n\n  return (<div>\n\n    <img src=\"logo.png\" alt=\"logo\" id=\"logo\"/>\n    <Search panTo={panTo} getLatLngFromAddress={getLatLngFromAddress}/>\n    <Locate panTo={panTo} />\n\n    <GoogleMap \n    mapContainerStyle={mapContainerStyle}\n    zoom={4.7}\n    center={center}\n    options={options}\n    onLoad={onMapLoad}>\n      {markers.map((marker, i) => \n        <Marker \n          key={i} \n          position={{lat: marker.latitude, lng: marker.longitude}}\n          onClick={() => {\n            setSelected(marker);\n          }}\n        />\n      )}\n\n      {selected ? (\n        <InfoWindow \n        position={{lat: selected.latitude, lng: selected.longitude}} \n        onCloseClick={() => setSelected(null)}>\n          <div>\n            <h3>{selected.name}</h3>\n            <div>\n              <div>\n                1st Dose: {selected.singleDoses}\n              </div>\n              <div>\n                2nd Dose: {selected.doubleDoses}\n              </div>\n              <hr />\n              Total Vaccinated: {selected.singleDoses + selected.doubleDoses}\n            </div>\n          </div>\n        </InfoWindow>\n      ) : null}\n    </GoogleMap>\n  </div>)\n    \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}