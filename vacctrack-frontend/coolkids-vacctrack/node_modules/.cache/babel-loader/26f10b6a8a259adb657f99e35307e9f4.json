{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Desktop/software-guild/final-project/coolkids-vacctrack/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useRef, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport mapStyles from './mapStyles';\nimport Search from './Search';\nimport Locate from './Locate';\nimport { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVICE_URL = \"http://localhost:8080/VaccTrak\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\nconst center = {\n  lat: 37.090240,\n  lng: -95.712891\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n}; // const markers = [\n//   {\n//     vacCenter: \"Chicago\",\n//     numFirstVaccine: 100,\n//     numSecondVaccine: 100,\n//     lat: 41.878113,\n//     lng: -87.629799\n//   },\n//   {\n//     vacCenter: \"New Jersey\",\n//     numFirstVaccine: 200,\n//     numSecondVaccine: 100,\n//     lat: 40.073040,\n//     lng: -74.724319\n//   }\n// ]\n\nfunction App() {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAp1BrMA7-YofbC3iJapScTWCpI8GmZm-w\",\n    libraries: libraries\n  });\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n    fetch(SERVICE_URL + \"/getAllVaccCenters\").then(data => data.json()).then(data => setMarkers(data.map(vaccCenter => {\n      getVaccCenter;\n    })));\n  }, []);\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  const getLatLngFromAddress = useCallback(async address => {\n    try {\n      const results = await getGeocode({\n        address\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]);\n      return {\n        lat,\n        lng\n      };\n    } catch (error) {\n      console.log(\"error1\");\n    }\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"logo.png\",\n      alt: \"logo\",\n      id: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      panTo: panTo,\n      getLatLngFromAddress: getLatLngFromAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Locate, {\n      panTo: panTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 4.7,\n      center: center,\n      options: options,\n      onLoad: onMapLoad,\n      children: [markers.map((marker, i) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => {\n          setSelected(marker);\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.lat,\n          lng: selected.lng\n        },\n        onCloseClick: () => setSelected(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: selected.vacCenter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"1st Dose: \", selected.numFirstVaccine]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"2nd Dose: \", selected.numSecondVaccine]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), \"Total Vaccinated: \", selected.numFirstVaccine + selected.numSecondVaccine]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 11\n  }, this);\n}\n\n_s(App, \"1Tvbs/SGn7ADvgoCoNsBFID9vCk=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joey/Desktop/software-guild/final-project/coolkids-vacctrack/src/App.js"],"names":["React","useState","useRef","useCallback","GoogleMap","useLoadScript","Marker","InfoWindow","mapStyles","Search","Locate","getGeocode","getLatLng","SERVICE_URL","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","App","isLoaded","loadError","googleMapsApiKey","markers","setMarkers","selected","setSelected","mapRef","onMapLoad","map","current","fetch","then","data","json","vaccCenter","getVaccCenter","panTo","setZoom","getLatLngFromAddress","address","results","error","console","log","marker","i","vacCenter","numFirstVaccine","numSecondVaccine"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {useState, useRef, useCallback} from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport mapStyles from './mapStyles';\nimport Search from './Search';\nimport Locate from './Locate';\nimport {\n  getGeocode,\n  getLatLng\n} from \"use-places-autocomplete\";\n\nconst SERVICE_URL = \"http://localhost:8080/VaccTrak\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\nconst center = {\n  lat: 37.090240,\n  lng: -95.712891\n}\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n}\n\n// const markers = [\n//   {\n//     vacCenter: \"Chicago\",\n//     numFirstVaccine: 100,\n//     numSecondVaccine: 100,\n//     lat: 41.878113,\n//     lng: -87.629799\n//   },\n//   {\n//     vacCenter: \"New Jersey\",\n//     numFirstVaccine: 200,\n//     numSecondVaccine: 100,\n//     lat: 40.073040,\n//     lng: -74.724319\n//   }\n// ]\n\n\nfunction App() {\n  const {isLoaded, loadError} = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAp1BrMA7-YofbC3iJapScTWCpI8GmZm-w\",\n    libraries: libraries\n  })\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n\n  const mapRef = useRef();\n  const onMapLoad = useCallback(\n    (map) => {\n      mapRef.current = map;\n      fetch(SERVICE_URL + \"/getAllVaccCenters\")\n      .then(data => data.json())\n      .then(data => setMarkers(data.map((vaccCenter) => {getVaccCenter} )));\n    },\n    []\n  )\n\n  const panTo = useCallback(\n  ({lat, lng}) => {\n    mapRef.current.panTo({lat, lng});\n    mapRef.current.setZoom(14);\n  },\n  [],\n  )\n\n  const getLatLngFromAddress = useCallback(async (address) => {\n        try {\n          const results = await getGeocode({address});\n          const { lat, lng } = await getLatLng(results[0]);\n          return ({lat, lng})\n        } catch(error) {\n          console.log(\"error1\");\n        }\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n\n  return (<div>\n\n    <img src=\"logo.png\" alt=\"logo\" id=\"logo\"/>\n    <Search panTo={panTo} getLatLngFromAddress={getLatLngFromAddress}/>\n    <Locate panTo={panTo} />\n\n    <GoogleMap \n    mapContainerStyle={mapContainerStyle}\n    zoom={4.7}\n    center={center}\n    options={options}\n    onLoad={onMapLoad}>\n      {markers.map((marker, i) => \n        <Marker \n          key={i} \n          position={{lat: marker.lat, lng: marker.lng}}\n          onClick={() => {\n            setSelected(marker);\n          }}\n        />\n      )}\n\n      {selected ? (\n        <InfoWindow \n        position={{lat: selected.lat, lng: selected.lng}} \n        onCloseClick={() => setSelected(null)}>\n          <div>\n            <h3>{selected.vacCenter}</h3>\n            <div>\n              <div>\n                1st Dose: {selected.numFirstVaccine}\n              </div>\n              <div>\n                2nd Dose: {selected.numSecondVaccine}\n              </div>\n              <hr />\n              Total Vaccinated: {selected.numFirstVaccine + selected.numSecondVaccine}\n            </div>\n          </div>\n        </InfoWindow>\n      ) : null}\n    </GoogleMap>\n  </div>)\n    \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}